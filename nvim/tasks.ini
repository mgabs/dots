# vim: set fenc=utf-8 ft=taskini:
# see: https://github.com/skywind3000/asynctasks.vim/wiki/Task-Config

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=2
notify=echo

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command:make=make -f "$(VIM_FILEPATH)"
command:c=gcc -fmax-errors=20 -std=gnu11 -Wall -Wstrict-aliasing=1 -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=g++ -fmax-errors=20 -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:dot=dot -Tpng -o  $(VIM_PATHNOEXT).png $(VIM_FILEPATH)
command:sh=sh "$(VIM_FILENAME)"
command:asm=as --64 -gdwarf-4 -o "$(VIM_PATHNOEXT).o" "$(VIM_FILEPATH)" && ld -m elf_i386 -dynamic-linker /lib/ld-linux.so -lc -o "$(VIM_PATHNOEXT)" -o "$(VIM_PATHNOEXT).o"
# only parse lua source code
command:lua=luac -p "$(VIM_FILENAME)"
command:rust=cargo build
command:terraform=terraform apply -auto-approve


[file-test]
command:c,cpp,asm="$(VIM_PATHNOEXT)"
command:lua=lua "$(VIM_FILENAME)"
command:rust=cargo test
output=quickfix

[file-run]

cwd=$(VIM_ROOT)
save=2
output=quickfix

command=gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:java=mvn clean install && java -jar target/build-0.1.0.jar
command:javascript=node "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:python=python "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:rust=cargo run
command:sh=sh "$(VIM_FILENAME)"
command:terraform=terraform plan
command:typescript=tsc $(VIM_FILENAME) --target es5 && node $(VIM_FILENOEXT).js

[file-play]

cwd=$(VIM_ROOT)
save=2
output=quickfix

command:rust=cargo play "$(VIM_FILEPATH)"

[file-build:gcc]
command:c=gcc -fmax-errors=20 -std=gnu11 -Wall -Wstrict-aliasing=1 -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=g++ -fmax-errors=20 -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"

[file-build:clang]
command:c=clang -std=gnu11 -Wall -gdwarf-4 -pthread -lm "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:cpp=clang++  -D_GLIBCXX_DEBUG -std=c++20 -Wall -gdwarf-4 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"

[file-test:gcc]
command:cpp=g++ -fmax-errors=20 -std=c++20 -Wall -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread

[file-test:clang]
command:cpp=clang++ -fmax-errors=20 -std=c++20 -Wall -Wstrict-aliasing=1 -gdwarf-4  "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lgtest -lgmock -lpthread
